@page "/register"

@using Services;

@inject UserService service

@inject NavigationManager nav


 <div class="registercontainer">

        <h1>Empresa</h1>
        <p>
            <label>Nome Completo</label>
            <input type="text" @bind-value="@name"/>
        </p>

        <p>
            <label>Senha</label>
            <input type="password" @bind-value="@password"/>
        </p>

        <p>
            <label>Repetir Senha</label>
            <input type="password" @bind-value="@repeatpassword"/>
        </p>

        <p>
            <label>Nome de Usuario</label>
            <input type="text" @bind-value="@userId"/>
        </p>

        <button onclick="@CreateAccount">
            Criar Conta
        </button>
    </div>

    <div class="registercontainer2">

        <h1>Desempregado</h1>
        <p>
            <label>Nome Completo</label>
            <input type="text" @bind-value="@name"/>
        </p>

        <p>
            <label>Senha</label>
            <input type="password" @bind-value="@password"/>
        </p>

        <p>
            <label>Repetir Senha</label>
            <input type="password" @bind-value="@repeatpassword"/>
        </p>

        <p>
            <label>Nome de Usuario</label>
            <input type="text" @bind-value="@userId"/>
        </p>

        <button onclick="@CreateAccount">
            Criar Conta
        </button>
    </div>



   @code 
{
    private string name;
    private string password;
    private string repeatpassword;
    private DateTime birth;
    private string userId;

    public async void CreateAccount()
    {
        await service.Register(
            this.name, 
            this.userId,
            this.birth, 
            this.password);

            this.name = ""; 
            this.userId = "";
            this.birth = DateTime.Now; 
            this.repeatpassword = "";
            this.password = "" ;

            this.StateHasChanged();
            
    } 
}

 
